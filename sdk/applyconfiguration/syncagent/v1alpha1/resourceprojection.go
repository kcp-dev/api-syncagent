/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kcp-dev/api-syncagent/sdk/apis/syncagent/v1alpha1"
)

// ResourceProjectionApplyConfiguration represents a declarative configuration of the ResourceProjection type for use
// with apply.
type ResourceProjectionApplyConfiguration struct {
	Group      *string                 `json:"group,omitempty"`
	Version    *string                 `json:"version,omitempty"`
	Versions   map[string]string       `json:"versions,omitempty"`
	Scope      *v1alpha1.ResourceScope `json:"scope,omitempty"`
	Kind       *string                 `json:"kind,omitempty"`
	Plural     *string                 `json:"plural,omitempty"`
	ShortNames []string                `json:"shortNames,omitempty"`
	Categories []string                `json:"categories,omitempty"`
}

// ResourceProjectionApplyConfiguration constructs a declarative configuration of the ResourceProjection type for use with
// apply.
func ResourceProjection() *ResourceProjectionApplyConfiguration {
	return &ResourceProjectionApplyConfiguration{}
}

// WithGroup sets the Group field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Group field is set to the value of the last call.
func (b *ResourceProjectionApplyConfiguration) WithGroup(value string) *ResourceProjectionApplyConfiguration {
	b.Group = &value
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *ResourceProjectionApplyConfiguration) WithVersion(value string) *ResourceProjectionApplyConfiguration {
	b.Version = &value
	return b
}

// WithVersions puts the entries into the Versions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Versions field,
// overwriting an existing map entries in Versions field with the same key.
func (b *ResourceProjectionApplyConfiguration) WithVersions(entries map[string]string) *ResourceProjectionApplyConfiguration {
	if b.Versions == nil && len(entries) > 0 {
		b.Versions = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Versions[k] = v
	}
	return b
}

// WithScope sets the Scope field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Scope field is set to the value of the last call.
func (b *ResourceProjectionApplyConfiguration) WithScope(value v1alpha1.ResourceScope) *ResourceProjectionApplyConfiguration {
	b.Scope = &value
	return b
}

// WithKind sets the Kind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kind field is set to the value of the last call.
func (b *ResourceProjectionApplyConfiguration) WithKind(value string) *ResourceProjectionApplyConfiguration {
	b.Kind = &value
	return b
}

// WithPlural sets the Plural field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Plural field is set to the value of the last call.
func (b *ResourceProjectionApplyConfiguration) WithPlural(value string) *ResourceProjectionApplyConfiguration {
	b.Plural = &value
	return b
}

// WithShortNames adds the given value to the ShortNames field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ShortNames field.
func (b *ResourceProjectionApplyConfiguration) WithShortNames(values ...string) *ResourceProjectionApplyConfiguration {
	for i := range values {
		b.ShortNames = append(b.ShortNames, values[i])
	}
	return b
}

// WithCategories adds the given value to the Categories field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Categories field.
func (b *ResourceProjectionApplyConfiguration) WithCategories(values ...string) *ResourceProjectionApplyConfiguration {
	for i := range values {
		b.Categories = append(b.Categories, values[i])
	}
	return b
}
