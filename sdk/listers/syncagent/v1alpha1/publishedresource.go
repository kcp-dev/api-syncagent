/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	syncagentv1alpha1 "github.com/kcp-dev/api-syncagent/sdk/apis/syncagent/v1alpha1"
)

// PublishedResourceClusterLister can list PublishedResources across all workspaces, or scope down to a PublishedResourceLister for one workspace.
// All objects returned here must be treated as read-only.
type PublishedResourceClusterLister interface {
	// List lists all PublishedResources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*syncagentv1alpha1.PublishedResource, err error)
	// Cluster returns a lister that can list and get PublishedResources in one workspace.
	Cluster(clusterName logicalcluster.Name) PublishedResourceLister
	PublishedResourceClusterListerExpansion
}

type publishedResourceClusterLister struct {
	indexer cache.Indexer
}

// NewPublishedResourceClusterLister returns a new PublishedResourceClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewPublishedResourceClusterLister(indexer cache.Indexer) *publishedResourceClusterLister {
	return &publishedResourceClusterLister{indexer: indexer}
}

// List lists all PublishedResources in the indexer across all workspaces.
func (s *publishedResourceClusterLister) List(selector labels.Selector) (ret []*syncagentv1alpha1.PublishedResource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*syncagentv1alpha1.PublishedResource))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get PublishedResources.
func (s *publishedResourceClusterLister) Cluster(clusterName logicalcluster.Name) PublishedResourceLister {
	return &publishedResourceLister{indexer: s.indexer, clusterName: clusterName}
}

// PublishedResourceLister can list all PublishedResources, or get one in particular.
// All objects returned here must be treated as read-only.
type PublishedResourceLister interface {
	// List lists all PublishedResources in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*syncagentv1alpha1.PublishedResource, err error)
	// Get retrieves the PublishedResource from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*syncagentv1alpha1.PublishedResource, error)
	PublishedResourceListerExpansion
}

// publishedResourceLister can list all PublishedResources inside a workspace.
type publishedResourceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all PublishedResources in the indexer for a workspace.
func (s *publishedResourceLister) List(selector labels.Selector) (ret []*syncagentv1alpha1.PublishedResource, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*syncagentv1alpha1.PublishedResource))
	})
	return ret, err
}

// Get retrieves the PublishedResource from the indexer for a given workspace and name.
func (s *publishedResourceLister) Get(name string) (*syncagentv1alpha1.PublishedResource, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(syncagentv1alpha1.Resource("publishedresources"), name)
	}
	return obj.(*syncagentv1alpha1.PublishedResource), nil
}

// NewPublishedResourceLister returns a new PublishedResourceLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewPublishedResourceLister(indexer cache.Indexer) *publishedResourceScopedLister {
	return &publishedResourceScopedLister{indexer: indexer}
}

// publishedResourceScopedLister can list all PublishedResources inside a workspace.
type publishedResourceScopedLister struct {
	indexer cache.Indexer
}

// List lists all PublishedResources in the indexer for a workspace.
func (s *publishedResourceScopedLister) List(selector labels.Selector) (ret []*syncagentv1alpha1.PublishedResource, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*syncagentv1alpha1.PublishedResource))
	})
	return ret, err
}

// Get retrieves the PublishedResource from the indexer for a given workspace and name.
func (s *publishedResourceScopedLister) Get(name string) (*syncagentv1alpha1.PublishedResource, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(syncagentv1alpha1.Resource("publishedresources"), name)
	}
	return obj.(*syncagentv1alpha1.PublishedResource), nil
}
