/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	syncagentv1alpha1 "github.com/kcp-dev/api-syncagent/sdk/apis/syncagent/v1alpha1"
	scopedclientset "github.com/kcp-dev/api-syncagent/sdk/clientset/versioned"
	clientset "github.com/kcp-dev/api-syncagent/sdk/clientset/versioned/cluster"
	"github.com/kcp-dev/api-syncagent/sdk/informers/externalversions/internalinterfaces"
	syncagentv1alpha1listers "github.com/kcp-dev/api-syncagent/sdk/listers/syncagent/v1alpha1"
)

// PublishedResourceClusterInformer provides access to a shared informer and lister for
// PublishedResources.
type PublishedResourceClusterInformer interface {
	Cluster(logicalcluster.Name) PublishedResourceInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() syncagentv1alpha1listers.PublishedResourceClusterLister
}

type publishedResourceClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewPublishedResourceClusterInformer constructs a new informer for PublishedResource type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewPublishedResourceClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredPublishedResourceClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredPublishedResourceClusterInformer constructs a new informer for PublishedResource type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredPublishedResourceClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SyncagentV1alpha1().PublishedResources().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SyncagentV1alpha1().PublishedResources().Watch(context.TODO(), options)
			},
		},
		&syncagentv1alpha1.PublishedResource{},
		resyncPeriod,
		indexers,
	)
}

func (f *publishedResourceClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredPublishedResourceClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *publishedResourceClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&syncagentv1alpha1.PublishedResource{}, f.defaultInformer)
}

func (f *publishedResourceClusterInformer) Lister() syncagentv1alpha1listers.PublishedResourceClusterLister {
	return syncagentv1alpha1listers.NewPublishedResourceClusterLister(f.Informer().GetIndexer())
}

// PublishedResourceInformer provides access to a shared informer and lister for
// PublishedResources.
type PublishedResourceInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() syncagentv1alpha1listers.PublishedResourceLister
}

func (f *publishedResourceClusterInformer) Cluster(clusterName logicalcluster.Name) PublishedResourceInformer {
	return &publishedResourceInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type publishedResourceInformer struct {
	informer cache.SharedIndexInformer
	lister   syncagentv1alpha1listers.PublishedResourceLister
}

func (f *publishedResourceInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *publishedResourceInformer) Lister() syncagentv1alpha1listers.PublishedResourceLister {
	return f.lister
}

type publishedResourceScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *publishedResourceScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&syncagentv1alpha1.PublishedResource{}, f.defaultInformer)
}

func (f *publishedResourceScopedInformer) Lister() syncagentv1alpha1listers.PublishedResourceLister {
	return syncagentv1alpha1listers.NewPublishedResourceLister(f.Informer().GetIndexer())
}

// NewPublishedResourceInformer constructs a new informer for PublishedResource type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewPublishedResourceInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredPublishedResourceInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredPublishedResourceInformer constructs a new informer for PublishedResource type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredPublishedResourceInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SyncagentV1alpha1().PublishedResources().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SyncagentV1alpha1().PublishedResources().Watch(context.TODO(), options)
			},
		},
		&syncagentv1alpha1.PublishedResource{},
		resyncPeriod,
		indexers,
	)
}

func (f *publishedResourceScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredPublishedResourceInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
